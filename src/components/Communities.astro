---
import { getCommunities } from "../lib/communities";

const communities = await getCommunities();
const communitiesJson = JSON.stringify(communities);
---

<div class="communities-wrapper" id="communities-component">
    <div class="left-pane">
        <div class="title-box">Topluluklar</div>
        <div class="slider-container">
            <div class="slider">
                {communities.map((community, index) => (
                    <div class="slide" data-index={index}>
                        <img src={community.image} alt={community.name} draggable="false" />
                    </div>
                ))}
            </div>
        </div>
        <div class="slider-scrollbar">
            <div class="scrollbar-thumb"></div>
        </div>
    </div>
    <div class="arrow-separator">
        <span class="triangle"></span>
        <span class="triangle"></span>
        <span class="triangle"></span>
    </div>
    <div class="right-pane">
        <div class="title-box" id="community-name-box"></div>
        <div class="content-container">
            {communities.map((community, index) => (
                <div class="content" data-index={index}>
                    <p class="content-description">{community.description}</p>
                    <a href={community.link} class="join-button" target="_blank" rel="noopener noreferrer">Join Here!</a>
                </div>
            ))}
        </div>
    </div>
</div>

<script define:vars={{ communitiesJson }}>
    document.addEventListener('DOMContentLoaded', () => {
        const communities = JSON.parse(communitiesJson);
        const component = document.getElementById('communities-component');
        if (!component) return;

        const slider = component.querySelector('.slider');
        const sliderContainer = component.querySelector('.slider-container');
        const scrollbar = component.querySelector('.slider-scrollbar');
        const thumb = component.querySelector('.scrollbar-thumb');
        const slides = component.querySelectorAll('.slide');
        const contents = component.querySelectorAll('.content');
        const dynamicTitleBox = component.querySelector('#community-name-box');

        let isDown = false;
        let startX;
        let scrollLeft;

        function updateActive(index) {
            slides.forEach((s, i) => s.classList.toggle('active', i === index));
            contents.forEach((c, i) => c.classList.toggle('active', i === index));
            if (communities[index]) {
                dynamicTitleBox.textContent = communities[index].name;
            }
        }

        function updateThumbPosition() {
            const maxScrollLeft = sliderContainer.scrollWidth - sliderContainer.clientWidth;
            if (maxScrollLeft <= 0) {
                thumb.style.width = '100%';
                thumb.style.left = '0px';
                return;
            }
            const scrollRatio = sliderContainer.scrollLeft / maxScrollLeft;
            const visibleRatio = sliderContainer.clientWidth / sliderContainer.scrollWidth;
            const thumbWidth = Math.max(scrollbar.clientWidth * visibleRatio, 30); // Minimum 30px
            thumb.style.width = `${thumbWidth}px`;
            const thumbMaxMove = scrollbar.clientWidth - thumbWidth;
            thumb.style.left = `${scrollRatio * thumbMaxMove}px`;
        }

        // Add click functionality to scrollbar
        scrollbar.addEventListener('click', (e) => {
            const rect = scrollbar.getBoundingClientRect();
            const clickX = e.clientX - rect.left;
            const scrollbarWidth = scrollbar.clientWidth;
            const thumbWidth = parseFloat(thumb.style.width);
            const maxThumbMove = scrollbarWidth - thumbWidth;
            const maxScrollLeft = sliderContainer.scrollWidth - sliderContainer.clientWidth;
            
            // Calculate where to scroll based on click position
            const targetThumbLeft = Math.max(0, Math.min(clickX - thumbWidth / 2, maxThumbMove));
            const scrollRatio = targetThumbLeft / maxThumbMove;
            sliderContainer.scrollLeft = scrollRatio * maxScrollLeft;
        });

        // Add drag functionality to scrollbar thumb
        let isDraggingThumb = false;
        let thumbStartX = 0;
        let scrollStartLeft = 0;

        thumb.addEventListener('mousedown', (e) => {
            isDraggingThumb = true;
            thumbStartX = e.clientX;
            scrollStartLeft = sliderContainer.scrollLeft;
            e.stopPropagation(); // Prevent scrollbar click event
        });

        document.addEventListener('mousemove', (e) => {
            if (!isDraggingThumb) return;
            e.preventDefault();
            
            const deltaX = e.clientX - thumbStartX;
            const thumbWidth = parseFloat(thumb.style.width);
            const maxThumbMove = scrollbar.clientWidth - thumbWidth;
            const maxScrollLeft = sliderContainer.scrollWidth - sliderContainer.clientWidth;
            
            const scrollDelta = (deltaX / maxThumbMove) * maxScrollLeft;
            sliderContainer.scrollLeft = Math.max(0, Math.min(scrollStartLeft + scrollDelta, maxScrollLeft));
        });

        document.addEventListener('mouseup', () => {
            isDraggingThumb = false;
        });

        // Mouse drag on slider container
        sliderContainer.addEventListener('mousedown', (e) => {
            isDown = true;
            sliderContainer.classList.add('active');
            startX = e.pageX - sliderContainer.offsetLeft;
            scrollLeft = sliderContainer.scrollLeft;
        });

        sliderContainer.addEventListener('mouseleave', () => {
            isDown = false;
            sliderContainer.classList.remove('active');
        });

        sliderContainer.addEventListener('mouseup', () => {
            isDown = false;
            sliderContainer.classList.remove('active');
        });

        sliderContainer.addEventListener('mousemove', (e) => {
            if (!isDown) return;
            e.preventDefault();
            const x = e.pageX - sliderContainer.offsetLeft;
            const walk = (x - startX) * 2;
            sliderContainer.scrollLeft = scrollLeft - walk;
        });
        
        
        sliderContainer.addEventListener('scroll', updateThumbPosition);
        window.addEventListener('resize', updateThumbPosition);

        slides.forEach((slide, index) => {
            slide.addEventListener('click', () => {
                updateActive(index);
            });
        });

        if (slides.length > 0) {
            updateActive(0);
            setTimeout(updateThumbPosition, 100);
        }
    });
</script>

<style>
    .communities-wrapper {
        display: flex;
        gap: 0;
        align-items: center;
        background: transparent;
        padding: 10px 10px;        /* was 15px 20px */
        font-family: Metropolis;
        width: 95%;               /* was 85% â€” closer to edges */
        max-width: 1500px;        
        margin: 0 auto;
        transform: none;          /* REMOVE scale */
    }
    .left-pane, .right-pane {
        background-color: #242424;
        padding: 18px; /* Reduced padding */
        padding-top: 35px; /* Reduced top padding */
        position: relative;
        height: 180px; /* Reduced from 220px */
        display: flex;
        flex-direction: column;
        width: 0; /* Set to 0 to let flex-grow work properly */
        flex-grow: 1; /* Both grow equally */
        flex-shrink: 1; /* Both shrink equally */
        flex-basis: 0; /* Start from 0 basis for true equality */
    }
    .right-pane {
        color: #E0E0E0;
    }
    .arrow-separator {
        display: flex;
        flex-direction: row; /* Changed from column to row */
        align-items: center;
        justify-content: center;
        padding: 0 15px;
        color: #c0c0c0;
        gap: 4px; /* Smaller gap for horizontal arrows */
        flex-shrink: 0; /* Prevent separator from shrinking */
    }
    .arrow-separator span {
        font-size: 24px;
        line-height: 1;
    }
    .title-box {
        position: absolute;
        top: -10px;
        left: 15px; /* Adjusted to match new padding */
        background-color: #F0F0F0;
        color: #1F1F1F;
        padding: 4px 8px;
        font-size: 12px;
        font-weight: bold;
        z-index: 10;
    }
    .slider-container {
        overflow-x: auto; /* Changed from auto to scroll */
        overflow-y: hidden;
        scrollbar-width: none;
        -ms-overflow-style: none;
        max-width: 100%;
        margin-top: 10px; /* Add some space below title */
        cursor: grab;
        padding-right: 0;
    }
    .slider-container:active {
        cursor: grabbing;
    }
    .slider-container::-webkit-scrollbar {
        display: none;
    }
    .slider {
        display: flex;
        gap: 15px; /* Reduced gap */
        padding-bottom: 12px;
        user-select: none;
        width: max-content;
    }
    .slide {
        flex: 0 0 calc(100% / 7.5); /* Smaller items - show more at once */
        aspect-ratio: 1 / 1;
        border: 2px solid #555; /* Thinner border */
        transition: border-color 0.3s ease;
        background-color: #1a1a1a;
    }
    .slide.active {
        border-color: #E0E0E0;
    }
    .slide img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    .slider-scrollbar {
        width: 100%;
        height: 4px; /* Slightly thicker for better visibility */
        background-color: #1a1a1a;
        border-radius: 2px;
        position: relative;
        margin-top: 8px;
        cursor: pointer; /* Make it clear it's interactive */
    }
    .scrollbar-thumb {
        height: 100%;
        background-color: #D60032;
        border-radius: 2px;
        position: absolute;
    }
    .content {
        display: none;
        flex-grow: 1;
        flex-direction: column;
    }
    .content.active {
        display: flex; /* Use flexbox */
    }
    .content-container {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
    }
    .content-description {
        font-size: 16px; /* Increased font size to match template */
        line-height: 1.6;
        color: #E0E0E0; /* Changed to lighter color to match template */
        flex-grow: 1; /* Allow description to take available space */
    }
    .join-button {
        display: inline-block;
        background-color: #D60032;
        color: white;
        padding: 6px 16px; /* Slightly smaller button */
        text-decoration: none;
        font-weight: normal;
        font-size: 12px;
        border: none;
        border-radius: 0;
        transition: background-color 0.3s ease;
        align-self: flex-start; /* Align to the left */
        margin-top: auto; /* Push to the bottom */
    }
    .join-button:hover {
        background-color: #E50036;
    }
    /* Triangles between panes */
.arrow-separator {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0 15px;
    gap: 6px; /* spacing between triangles */
}

/* Each triangle */
.arrow-separator .triangle {
    width: 0;
    height: 0;
    border-top: 8px solid transparent;
    border-bottom: 8px solid transparent;
    border-left: 12px solid #c0c0c0;  /* triangle color */
}

/* Hover glow effect (optional, matches osu! vibe) */
.arrow-separator .triangle:hover {
    border-left-color: #ffffff;
    cursor: pointer;
    filter: drop-shadow(0 0 4px rgba(255,255,255,0.6));
}

</style>