---
import * as osu from 'osu-api-v2-js';
import db from '../lib/mongodb';
import type { User } from '../types/user';

const code = Astro.url.searchParams.get('code');

if (!code) {
    const clientId = import.meta.env.CLIENT_ID;
    const redirectUri = import.meta.env.REDIRECT_URI;
    const authUrl = `https://osu.ppy.sh/oauth/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&response_type=code&scope=public identify`;
    return Astro.redirect(authUrl);
} else {
    try {
        const osu_api = await osu.API.createAsync(
            parseInt(import.meta.env.CLIENT_ID),
            import.meta.env.CLIENT_SECRET,
            { code, redirect_uri: import.meta.env.REDIRECT_URI }
        );
        const user = await osu_api.getResourceOwner();

        const users = db.collection<User>('users');
        await users.updateOne(
            { _id: user.id.toString() },
            {
                $set: {
                    osu_id: user.id,
                    osu_username: user.username,
                    updatedAt: new Date(),
                },
                $setOnInsert: {
                    createdAt: new Date(),
                },
            },
            { upsert: true }
        );

        const token = {
            access_token: osu_api.access_token,
            expires_in: osu_api.expires_in,
            refresh_token: osu_api.refresh_token,
            token_type: osu_api.token_type,
        };
        Astro.cookies.set('osuturkiye-token', JSON.stringify(token), { path: '/', maxAge: osu_api.expires_in });
        return Astro.redirect('/profile');
    } catch (error) {
        console.error("Error during osu! API authentication:", error);
        return new Response("Authentication failed. Please try again.", { status: 500 });
    }
}
---
